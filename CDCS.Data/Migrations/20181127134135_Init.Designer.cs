// <auto-generated />
using System;
using CDCS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CDCS.Data.Migrations
{
    [DbContext(typeof(CdcsContext))]
    [Migration("20181127134135_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CDCS.Model.Accreditation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("AccreditorId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AccreditorId");

                    b.ToTable("Accreditations");
                });

            modelBuilder.Entity("CDCS.Model.Accreditor", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Accreditors");
                });

            modelBuilder.Entity("CDCS.Model.Base.CategoryString", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedNever()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("Language");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("RefId");

                    b.Property<int>("RefTableEnum");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TextValue");

                    b.HasKey("Id");

                    b.ToTable("CategoryStrings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CategoryString");
                });

            modelBuilder.Entity("CDCS.Model.Base.OrganisationString", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedNever()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("Language");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("RefId");

                    b.Property<int>("RefTableEnum");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TextValue");

                    b.HasKey("Id");

                    b.ToTable("OrganisationStrings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("OrganisationString");
                });

            modelBuilder.Entity("CDCS.Model.Category", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("LinkCategoriesIds");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CDCS.Model.ContactMode", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("ContactModes");
                });

            modelBuilder.Entity("CDCS.Model.GeographicalZone", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("ParentsIds");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("GeographicalZones");
                });

            modelBuilder.Entity("CDCS.Model.Language", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CDCS.Model.Organisation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("AccreditationsIds");

                    b.Property<string>("CategoriesIds");

                    b.Property<string>("ChildrenIds");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("GeographicalZonesIds");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<int>("LegalStatusId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentOrganisationId");

                    b.Property<string>("RegistrationNumber");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("ServiceModesIds");

                    b.Property<string>("UsedLanguagesIds");

                    b.Property<bool>("UsesInterpreters");

                    b.Property<int>("WorkingLanguage");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("CDCS.Model.OrganisationLanguage", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("OrganisationLanguages");
                });

            modelBuilder.Entity("CDCS.Model.OrganisationLegalStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("OrganisationLegalStatuses");
                });

            modelBuilder.Entity("CDCS.Model.Sector", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<short>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("CDCS.Model.SectorCategoriesHierarchy", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CategoryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SectorId");

                    b.Property<int>("SortOrder");

                    b.Property<int?>("Topic1Id");

                    b.Property<int>("Topic1_SortOrder");

                    b.Property<int?>("Topic2Id");

                    b.Property<int>("Topic2_SortOrder");

                    b.Property<int?>("Topic3Id");

                    b.Property<int>("Topic3_SortOrder");

                    b.Property<int?>("Topic4Id");

                    b.Property<int>("Topic4_SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SectorId");

                    b.HasIndex("Topic1Id");

                    b.HasIndex("Topic2Id");

                    b.HasIndex("Topic3Id");

                    b.HasIndex("Topic4Id");

                    b.ToTable("SectorCategoriesHierarchies");
                });

            modelBuilder.Entity("CDCS.Model.Topic", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("CDCS.Model.Base.CategoryString_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.CategoryString");


                    b.ToTable("CategoryString_FR");

                    b.HasDiscriminator().HasValue("CategoryString_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.CategoryString_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.CategoryString");


                    b.ToTable("CategoryString_NL");

                    b.HasDiscriminator().HasValue("CategoryString_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.OrganisationString_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString");


                    b.ToTable("OrganisationString_FR");

                    b.HasDiscriminator().HasValue("OrganisationString_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.OrganisationString_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString");


                    b.ToTable("OrganisationString_NL");

                    b.HasDiscriminator().HasValue("OrganisationString_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.Keyword_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.CategoryString_FR");


                    b.HasIndex("RefId");

                    b.ToTable("Keyword_FR");

                    b.HasDiscriminator().HasValue("Keyword_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.Keyword_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.CategoryString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_CategoryStrings_RefId1");

                    b.ToTable("Keyword_NL");

                    b.HasDiscriminator().HasValue("Keyword_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.Accreditation_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId");

                    b.ToTable("Accreditation_FR");

                    b.HasDiscriminator().HasValue("Accreditation_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.ContactMode_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId2");

                    b.ToTable("ContactMode_FR");

                    b.HasDiscriminator().HasValue("ContactMode_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.Email_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId4");

                    b.ToTable("Email_FR");

                    b.HasDiscriminator().HasValue("Email_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.Fax_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId6");

                    b.ToTable("Fax_FR");

                    b.HasDiscriminator().HasValue("Fax_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.FormerName_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId8");

                    b.ToTable("FormerName_FR");

                    b.HasDiscriminator().HasValue("FormerName_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.OtherWebsite_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId10");

                    b.ToTable("OtherWebsite_FR");

                    b.HasDiscriminator().HasValue("OtherWebsite_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.Phone_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId12");

                    b.ToTable("Phone_FR");

                    b.HasDiscriminator().HasValue("Phone_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.Publication_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId14");

                    b.ToTable("Publication_FR");

                    b.HasDiscriminator().HasValue("Publication_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.ServiceName_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId16");

                    b.ToTable("ServiceName_FR");

                    b.HasDiscriminator().HasValue("ServiceName_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.Url_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId18");

                    b.ToTable("Url_FR");

                    b.HasDiscriminator().HasValue("Url_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.UsedName_FR", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_FR");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId20");

                    b.ToTable("UsedName_FR");

                    b.HasDiscriminator().HasValue("UsedName_FR");
                });

            modelBuilder.Entity("CDCS.Model.Base.Accreditation_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId1");

                    b.ToTable("Accreditation_NL");

                    b.HasDiscriminator().HasValue("Accreditation_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.ContactMode_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId3");

                    b.ToTable("ContactMode_NL");

                    b.HasDiscriminator().HasValue("ContactMode_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.Email_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId5");

                    b.ToTable("Email_NL");

                    b.HasDiscriminator().HasValue("Email_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.Fax_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId7");

                    b.ToTable("Fax_NL");

                    b.HasDiscriminator().HasValue("Fax_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.FormerName_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId9");

                    b.ToTable("FormerName_NL");

                    b.HasDiscriminator().HasValue("FormerName_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.OtherWebsite_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId11");

                    b.ToTable("OtherWebsite_NL");

                    b.HasDiscriminator().HasValue("OtherWebsite_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.Phone_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId13");

                    b.ToTable("Phone_NL");

                    b.HasDiscriminator().HasValue("Phone_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.Publication_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId15");

                    b.ToTable("Publication_NL");

                    b.HasDiscriminator().HasValue("Publication_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.ServiceName_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId17");

                    b.ToTable("ServiceName_NL");

                    b.HasDiscriminator().HasValue("ServiceName_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.Url_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId19");

                    b.ToTable("Url_NL");

                    b.HasDiscriminator().HasValue("Url_NL");
                });

            modelBuilder.Entity("CDCS.Model.Base.UsedName_NL", b =>
                {
                    b.HasBaseType("CDCS.Model.Base.OrganisationString_NL");


                    b.HasIndex("RefId")
                        .HasName("IX_OrganisationStrings_RefId21");

                    b.ToTable("UsedName_NL");

                    b.HasDiscriminator().HasValue("UsedName_NL");
                });

            modelBuilder.Entity("CDCS.Model.Accreditation", b =>
                {
                    b.HasOne("CDCS.Model.Accreditor", "Accreditor")
                        .WithMany("Accreditations")
                        .HasForeignKey("AccreditorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("AccreditationId1");

                            b1.Property<int>("AccreditationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Accreditations");

                            b1.HasOne("CDCS.Model.Accreditation")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "AccreditationId1")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.Accreditor", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("AccreditorId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Accreditors");

                            b1.HasOne("CDCS.Model.Accreditor")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "AccreditorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.Category", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Description", b1 =>
                        {
                            b1.Property<int>("CategoryId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Categories");

                            b1.HasOne("CDCS.Model.Category")
                                .WithOne("Description")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "CategoryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("CategoryId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Categories");

                            b1.HasOne("CDCS.Model.Category")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "CategoryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Website", b1 =>
                        {
                            b1.Property<int>("CategoryId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Categories");

                            b1.HasOne("CDCS.Model.Category")
                                .WithOne("Website")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "CategoryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.ContactMode", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("ContactModeId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("ContactModes");

                            b1.HasOne("CDCS.Model.ContactMode")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "ContactModeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.GeographicalZone", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("GeographicalZoneId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("GeographicalZones");

                            b1.HasOne("CDCS.Model.GeographicalZone")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "GeographicalZoneId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.Language", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("LanguageId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Languages");

                            b1.HasOne("CDCS.Model.Language")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "LanguageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.Organisation", b =>
                {
                    b.OwnsOne("CDCS.Model.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<double?>("Latitude");

                            b1.Property<double?>("Longitude");

                            b1.Property<string>("Monitoring_Code");

                            b1.Property<string>("PostCode");

                            b1.Property<string>("PostalBox");

                            b1.Property<string>("StatisticDistrict_Code");

                            b1.Property<string>("StreetNumber");

                            b1.Property<double?>("X_Coord");

                            b1.Property<double?>("Y_Coord");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("Address")
                                .HasForeignKey("CDCS.Model.Address", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("TLT.BaseModel.Base.BilingualItem", "City", b2 =>
                                {
                                    b2.Property<int>("AddressOrganisationId");

                                    b2.Property<string>("FR");

                                    b2.Property<string>("NL");

                                    b2.ToTable("Organisations");

                                    b2.HasOne("CDCS.Model.Address")
                                        .WithOne("City")
                                        .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "AddressOrganisationId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Co", b2 =>
                                {
                                    b2.Property<int>("AddressOrganisationId");

                                    b2.Property<string>("FR");

                                    b2.Property<string>("NL");

                                    b2.ToTable("Organisations");

                                    b2.HasOne("CDCS.Model.Address")
                                        .WithOne("Co")
                                        .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "AddressOrganisationId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("TLT.BaseModel.Base.BilingualItem", "MonitoringDistrict", b2 =>
                                {
                                    b2.Property<int>("AddressOrganisationId");

                                    b2.Property<string>("FR");

                                    b2.Property<string>("NL");

                                    b2.ToTable("Organisations");

                                    b2.HasOne("CDCS.Model.Address")
                                        .WithOne("MonitoringDistrict")
                                        .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "AddressOrganisationId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("TLT.BaseModel.Base.BilingualItem", "StatisticDistrict", b2 =>
                                {
                                    b2.Property<int>("AddressOrganisationId");

                                    b2.Property<string>("FR");

                                    b2.Property<string>("NL");

                                    b2.ToTable("Organisations");

                                    b2.HasOne("CDCS.Model.Address")
                                        .WithOne("StatisticDistrict")
                                        .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "AddressOrganisationId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Street", b2 =>
                                {
                                    b2.Property<int>("AddressOrganisationId");

                                    b2.Property<string>("FR");

                                    b2.Property<string>("NL");

                                    b2.ToTable("Organisations");

                                    b2.HasOne("CDCS.Model.Address")
                                        .WithOne("Street")
                                        .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "AddressOrganisationId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Activity", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("Activity")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Comment", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("Comment")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Mission", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("Mission")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "OfficialJournalUrl", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("OfficialJournalUrl")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "OpeningHours", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("OpeningHours")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Public", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("Public")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "SocialBrusselsUrl", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("SocialBrusselsUrl")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Website", b1 =>
                        {
                            b1.Property<int>("OrganisationId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Organisations");

                            b1.HasOne("CDCS.Model.Organisation")
                                .WithOne("Website")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.OrganisationLanguage", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("OrganisationLanguageId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("OrganisationLanguages");

                            b1.HasOne("CDCS.Model.OrganisationLanguage")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationLanguageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.OrganisationLegalStatus", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("OrganisationLegalStatusId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("OrganisationLegalStatuses");

                            b1.HasOne("CDCS.Model.OrganisationLegalStatus")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "OrganisationLegalStatusId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.Sector", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Description", b1 =>
                        {
                            b1.Property<int>("SectorId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Sectors");

                            b1.HasOne("CDCS.Model.Sector")
                                .WithOne("Description")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "SectorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("SectorId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Sectors");

                            b1.HasOne("CDCS.Model.Sector")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "SectorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.SectorCategoriesHierarchy", b =>
                {
                    b.HasOne("CDCS.Model.Category")
                        .WithMany("SectorCategoriesHierarchies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CDCS.Model.Sector")
                        .WithMany("SectorCategoriesHierarchies")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CDCS.Model.Topic")
                        .WithMany("Topic1_SectorCategoriesHierarchies")
                        .HasForeignKey("Topic1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CDCS.Model.Topic")
                        .WithMany("Topic2_SectorCategoriesHierarchies")
                        .HasForeignKey("Topic2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CDCS.Model.Topic")
                        .WithMany("Topic3_SectorCategoriesHierarchies")
                        .HasForeignKey("Topic3Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CDCS.Model.Topic")
                        .WithMany("Topic4_SectorCategoriesHierarchies")
                        .HasForeignKey("Topic4Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Topic", b =>
                {
                    b.OwnsOne("TLT.BaseModel.Base.BilingualItem", "Name", b1 =>
                        {
                            b1.Property<int>("TopicId");

                            b1.Property<string>("FR");

                            b1.Property<string>("NL");

                            b1.ToTable("Topics");

                            b1.HasOne("CDCS.Model.Topic")
                                .WithOne("Name")
                                .HasForeignKey("TLT.BaseModel.Base.BilingualItem", "TopicId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CDCS.Model.Base.Keyword_FR", b =>
                {
                    b.HasOne("CDCS.Model.Category")
                        .WithMany("Keywords_FR")
                        .HasForeignKey("RefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Keyword_NL", b =>
                {
                    b.HasOne("CDCS.Model.Category")
                        .WithMany("Keywords_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_CategoryStrings_Categories_RefId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Accreditation_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Accreditations_FR")
                        .HasForeignKey("RefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.ContactMode_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("ContactModes_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId2")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Email_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Emails_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId4")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Fax_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Faxes_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId6")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.FormerName_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("FormerNames_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId8")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.OtherWebsite_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("OtherWebsites_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId10")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Phone_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Phones_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId12")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Publication_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Publications_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId14")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.ServiceName_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("ServiceNames_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId16")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Url_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Urls_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId18")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.UsedName_FR", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("UsedNames_FR")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId20")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Accreditation_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Accreditations_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.ContactMode_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("ContactModes_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId3")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Email_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Emails_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId5")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Fax_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Faxes_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId7")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.FormerName_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("FormerNames_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId9")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.OtherWebsite_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("OtherWebsites_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId11")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Phone_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Phones_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId13")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Publication_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Publications_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId15")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.ServiceName_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("ServiceNames_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId17")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.Url_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("Urls_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId19")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CDCS.Model.Base.UsedName_NL", b =>
                {
                    b.HasOne("CDCS.Model.Organisation")
                        .WithMany("UsedNames_NL")
                        .HasForeignKey("RefId")
                        .HasConstraintName("FK_OrganisationStrings_Organisations_RefId21")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
